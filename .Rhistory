demo
q()
install.packages("slidify")
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
bioLite()
biocLite()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(KernSmooth)
exit
q
quit
quit (save)
yes
q()
x <- 1:20
x
X <- LIST(FOO=1:4, BAR=0.6)
X <- list(FOO=1:4, BAR=0.6)
x[1]
$foo
$FOO
X <- list(foo=1:4, bar=0.6, baz="hello")
name <- "foo"
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
x <-4
class(x)
x <-4
class(x)
x <- c(4,TRUE)
class(x)
q()
x <- list(a=1:5,b=rnorm(10))
lapply(x,mean)
mean(x)
traceback()
l:mean(x)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y-x)
n\
0
read.csv("open.csv")
exit
y
n
n
q
library("swirl")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list
)
?sapply
sapply(class(cls_list))
cls_vect <- as.character(cls_list)
cls_vect <-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lappy (sum(flag_colors))
lapply (sum(flag_colors))
lapply (flag_colors,sum())
lapply (flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <-lapply(flag_shapes,unique)
unique_vals <-lapply(flags,unique)
unique_vals
sapply (unique_vals,lenght)
sapply (unique_vals,length)
sapply (flags,unique)
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok
vapply(flags, unique, numeric(1))
ok90
ok()
sappy(flags,class)
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, flags$red, summary)
tapply(flags$landmass, summary)
tapply(flags$population,flags$landmass, summary)
setwd("C:/Users/Rodgers/Desktop/ProgrammingAssignment2")
ls
ls()
list.files()
lload(cachematrix.R)
load(cachematrix.R)
load("cachematrix.R")
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
?scan()
b <- matrix(c(1, 2, 3, 4),nrow=1, ncol=4,byrow=TRUE)
b
b <- matrix(c(1, 2, 3, 4),nrow=3, ncol=3,byrow=TRUE)
b <- matrix(c(1, 2, 3),nrow=3, ncol=3,byrow=TRUE)
b
set(b)
det(b)
b <- matrix(c(1, 2, 3,4,5,6),nrow=3, ncol=3,byrow=TRUE)
b
b <- matrix(c(1, 2, 3,4,5,6,7,8,9),nrow=3, ncol=3,byrow=TRUE)
b
det(b)
solve(b)
b <- matrix(c(100, 26, 63,74,85,86,37,28,39),nrow=3, ncol=3,byrow=TRUE)
det(b)
solve(b)
b <- matrix(c(2, 1, 1,3,2,1,2,1,2),nrow=3, ncol=3,byrow=TRUE)
b
det(b)
solve(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
makeCacheMatrix(b)
debugSource('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(1,2,3,5,6,7,8,9)
x<-c(1,2,3)
makeCacheMatrix(x)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
makeCacheMatrix(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
cacheSolve(x)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
cacheSolve(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
cacheSolve(x)
View(cacheSolve)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
source('~/.active-rstudio-document')
b <- matrix(c(2, 1, 1,3,2,1,2,1,2),nrow=3, ncol=3,byrow=TRUE)
makeCacheMatrix(b)
cacheSolve(b)
is.recursive(b)
is.atomic(b)
b <- matrix(c(7,3,-2,5),nrow=2, ncol=2,byrow=TRUE)
b
makeCacheMatrix(b)
cacheSolve(b)
?"$"
b
makeCacheMatrix(c(5,1,3))
a <- makeCacheMatrix(c(5,1,3))
a
cacheSolve(a)
a <- makeCacheMatrix(c(5,1,3,18,12,17))
a
a
cacheSolve(a)
cacheSolve(b)
cacheSolve(a)
cacheSolve(b)
makeCacheMatrix(b)
cacheSolve(b)
b$get()
is.matrix(b)
is.atomic(b)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
class(b)
a <- makeCacheMatrix( matrix(c(2, 4, 3, 1, 5, 7,3,10,44), nrow=3,ncol=3))
a
class(a)
unclass(a)
inv_mat
a$inv_mat
a$get()
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
a$get()
a$inv_mat
is.matrix(a)
a <- matrix(c(2, 4, 3, 1, 5, 7,3,10,44), nrow=3,ncol=3))
a <- matrix(c(2, 4, 3, 1, 5, 7,3,10,44), nrow=3,ncol=3)
source('C:/Users/Rodgers/Desktop/ProgrammingAssignment2/cachematrix.R')
class(a)
cacheSolve(a)
